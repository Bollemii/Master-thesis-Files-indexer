variables:
  DOCKER_TLS_CERTDIR: "/certs"    # Security for Docker-in-Docker
  DOCKER_BUILDKIT: "1"            # Enable BuildKit for faster builds
  CACHE_DIR: ".cache"             # Cache directory
  UV_CACHE_DIR: "${CACHE_DIR}/uv" # Cache directory for uv
  UV_LINK_MODE: copy

# Only run pipeline on main branch
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

stages:
  - lint
  - test

# Linting jobs
lint-backend:
  allow_failure: true
  stage: lint
  image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
  cache:
    key: ${CI_COMMIT_REF_SLUG}-uv
    paths:
      - ${UV_CACHE_DIR}
  variables:
    UV_CACHE_DIR: ${UV_CACHE_DIR}
    UV_SYSTEM_PYTHON: 1
  before_script:
    - cd backend
    - uv pip install flake8 black wheel
  script:
    - flake8 --max-line-length=120 app/
    - black --check app/
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - backend/**/* # Run only if files in the backend directory change

lint-frontend:
  allow_failure: true
  stage: lint
  image: node:20-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run lint
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - frontend/**/* # Run only if files in the frontend directory change

test-frontend:
  stage: test
  image: node:20-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm test
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - frontend/**/* # Run only if files in the frontend directory change

