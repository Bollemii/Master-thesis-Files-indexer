variables:
  DOCKER_TLS_CERTDIR: "/certs" # Security for Docker-in-Docker
  DOCKER_BUILDKIT: "1"         # Enable BuildKit for faster builds
  CACHE_DIR: ".cache"          # Cache directory

# Only run pipeline on main branch
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

stages:
  - lint
  - test
  - build

# Reusable templates
.docker-setup: &docker-setup
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
    - docker context create builder-context
    - docker buildx create --name mybuilder --driver docker-container --use builder-context
    - docker buildx inspect --bootstrap

# Linting jobs
lint-backend:
  stage: lint
  image: python:3.11-slim
  cache:
    key: ${CI_COMMIT_REF_SLUG}-python
    paths:
      - ${CACHE_DIR}/pip
  variables:
    PIP_CACHE_DIR: ${CACHE_DIR}/pip
  before_script:
    - cd backend
    - pip install flake8 black
  script:
    - flake8 --max-line-length=120 .
    - black --check .

lint-frontend:
  stage: lint
  image: node:20-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run lint

# Test jobs
test-backend:
  stage: test
  image: python:3.11-slim
  cache:
    key: ${CI_COMMIT_REF_SLUG}-python
    paths:
      - ${CACHE_DIR}/pip
  variables:
    PIP_CACHE_DIR: ${CACHE_DIR}/pip
  before_script:
    - cd backend
    - pip install -r requirements.txt
  script:
    - pytest --cov=. --cov-report=xml:coverage.xml --cov-report=term
  coverage: '/TOTAL.+?(\d+\%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
    paths:
      - backend/coverage.xml
    expire_in: 1 week

test-frontend:
  stage: test
  image: node:20-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm test

# Build jobs with multi-platform support
build-frontend:
  <<: *docker-setup
  stage: build
  script:
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --push \
        -t $CI_REGISTRY_IMAGE/frontend:latest \
        -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA \
        -t $DOCKERHUB_USERNAME/tfe-frontend:latest \
        -t $DOCKERHUB_USERNAME/tfe-frontend:$CI_COMMIT_SHORT_SHA \
        ./frontend

build-backend:
  <<: *docker-setup
  stage: build
  script:
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --push \
        -t $CI_REGISTRY_IMAGE/backend:latest \
        -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA \
        -t $DOCKERHUB_USERNAME/tfe-backend:latest \
        -t $DOCKERHUB_USERNAME/tfe-backend:$CI_COMMIT_SHORT_SHA \
        ./backend
